name: Release Desktop App

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"

jobs:
  build-and-release:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies (root)
        run: npm ci

      - name: Install dependencies (desktop)
        working-directory: apps/desktop
        run: npm ci

      - name: Generate Prisma client
        working-directory: apps/desktop
        run: npx prisma generate

      - name: Build desktop app
        working-directory: apps/desktop
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            npm run build:mac
          elif [ "$RUNNER_OS" == "Windows" ]; then
            npm run build:win
          else
            npm run build:linux
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: |
            apps/desktop/release/**/*.dmg
            apps/desktop/release/**/*.exe
            apps/desktop/release/**/*.AppImage
            apps/desktop/release/**/*.zip
          retention-days: 7

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.version }}
          release_name: PlanForge ${{ github.ref_name || github.event.inputs.version }}
          body: |
            ## üöÄ PlanForge Desktop ${{ github.ref_name || github.event.inputs.version }}

            ### üì¶ Downloads

            - **macOS**: Download `.dmg` file (unsigned - see installation guide below)
            - **Windows**: Download `.exe` file (unsigned - see installation guide below)
            - **Linux**: Download `.AppImage` file, add execute permission and run

            ### üîß Installation Instructions

            #### macOS (Important: Security Steps Required)
            1. Download `PlanForge-${{ github.ref_name || github.event.inputs.version }}.dmg`
            2. Double-click to open, drag to Applications folder
            3. **First Launch**: Right-click PlanForge.app ‚Üí "Open" ‚Üí "Open" (bypasses Gatekeeper)
            4. Alternative: Run `xattr -d com.apple.quarantine /Applications/PlanForge.app` in Terminal

            #### Windows (SmartScreen Warning Expected)
            1. Download `PlanForge Setup ${{ github.ref_name || github.event.inputs.version }}.exe`
            2. When SmartScreen appears: click "More info" ‚Üí "Run anyway"
            3. Follow installation prompts
            4. Alternative: Right-click installer ‚Üí Properties ‚Üí check "Unblock"

            #### Linux
            1. Download `PlanForge-${{ github.ref_name || github.event.inputs.version }}.AppImage`
            2. Add execute permission: `chmod +x PlanForge-*.AppImage`
            3. Double-click to run or execute from command line

            ### ‚ö†Ô∏è Security Notice
            These builds are unsigned to keep the project free and accessible. The app is safe but requires manual approval on first launch.

            ### ‚ú® Features
            - AI-powered project planning and task suggestions
            - Intuitive Gantt charts and Kanban views
            - Smart dependency management
            - Local data storage for privacy protection

            ### üêõ Bug Reports
            If you encounter issues, please report them in [Issues](https://github.com/${{ github.repository }}/issues).
          draft: false
          prerelease: false

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/release-macos-latest/apps/desktop/release/1.0.0/PlanForge-1.0.0-arm64.dmg
          asset_name: PlanForge-${{ github.ref_name || github.event.inputs.version }}-arm64.dmg
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload macOS DMG (Intel)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/release-macos-latest/apps/desktop/release/1.0.0/PlanForge-1.0.0.dmg
          asset_name: PlanForge-${{ github.ref_name || github.event.inputs.version }}-x64.dmg
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Windows EXE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/release-windows-latest/apps/desktop/release/1.0.0/PlanForge Setup 1.0.0.exe
          asset_name: PlanForge-Setup-${{ github.ref_name || github.event.inputs.version }}.exe
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/release-ubuntu-latest/apps/desktop/release/1.0.0/PlanForge-1.0.0.AppImage
          asset_name: PlanForge-${{ github.ref_name || github.event.inputs.version }}.AppImage
          asset_content_type: application/octet-stream
        continue-on-error: true
