{"version":3,"file":"main.js","sources":["../electron/database.ts","../electron/main.ts"],"sourcesContent":["import path from \"path\";\nimport { app } from \"electron\";\nimport fs from \"fs\";\n\n// Custom Prisma client import for production\nfunction createPrismaClient() {\n  const isDev =\n    process.env.NODE_ENV === \"development\" ||\n    (typeof app !== \"undefined\" && !app.isPackaged);\n\n  console.log(\"Creating Prisma client...\");\n  console.log(\"isDev:\", isDev);\n  console.log(\"process.resourcesPath:\", process.resourcesPath);\n\n  if (isDev) {\n    // In development, use normal import\n    console.log(\"Using development Prisma client\");\n    const { PrismaClient } = require(\"@prisma/client\");\n    return PrismaClient;\n  } else {\n    // In production, try to load from unpacked directory\n    console.log(\"Loading production Prisma client...\");\n\n    try {\n      const unpackedPath = path.join(\n        process.resourcesPath,\n        \"app.asar.unpacked\"\n      );\n      console.log(\"Unpacked path:\", unpackedPath);\n      console.log(\"Unpacked path exists:\", fs.existsSync(unpackedPath));\n\n      const prismaClientPath = path.join(\n        unpackedPath,\n        \"node_modules\",\n        \"@prisma\",\n        \"client\"\n      );\n      console.log(\"Prisma client path:\", prismaClientPath);\n      console.log(\n        \"Prisma client path exists:\",\n        fs.existsSync(prismaClientPath)\n      );\n\n      // Check if the unpacked Prisma client exists\n      const prismaGeneratedPath = path.join(\n        unpackedPath,\n        \"dist-electron\",\n        \".prisma\",\n        \"client\"\n      );\n\n      console.log(\n        \"Checking for generated Prisma client at:\",\n        prismaGeneratedPath\n      );\n      console.log(\n        \"Generated Prisma client exists:\",\n        fs.existsSync(prismaGeneratedPath)\n      );\n\n      if (fs.existsSync(prismaGeneratedPath)) {\n        console.log(\"Loading Prisma client from generated directory\");\n\n        // Set environment variables for Prisma\n        const queryEnginePath = path.join(\n          prismaGeneratedPath,\n          \"libquery_engine-darwin-arm64.dylib.node\"\n        );\n        console.log(\"Setting PRISMA_QUERY_ENGINE_LIBRARY to:\", queryEnginePath);\n        process.env.PRISMA_QUERY_ENGINE_LIBRARY = queryEnginePath;\n\n        // Load directly from the generated client\n        const { PrismaClient } = require(prismaGeneratedPath);\n        return PrismaClient;\n      } else if (fs.existsSync(prismaClientPath)) {\n        console.log(\"Loading Prisma client from unpacked @prisma/client\");\n        const { PrismaClient } = require(prismaClientPath);\n        return PrismaClient;\n      } else {\n        console.log(\"No unpacked Prisma client found, using fallback\");\n        // Fallback to regular import\n        const { PrismaClient } = require(\"@prisma/client\");\n        return PrismaClient;\n      }\n    } catch (error) {\n      console.error(\n        \"Failed to load Prisma client from unpacked directory:\",\n        error\n      );\n      console.log(\"Using fallback Prisma client\");\n      // Fallback to regular import\n      const { PrismaClient } = require(\"@prisma/client\");\n      return PrismaClient;\n    }\n  }\n}\n\nexport class DatabaseService {\n  private prisma: any;\n\n  constructor() {\n    // Initialize Prisma client with database path\n    const isDev =\n      process.env.NODE_ENV === \"development\" ||\n      (typeof app !== \"undefined\" && !app.isPackaged);\n\n    let dbPath: string;\n\n    if (isDev) {\n      // In development, use the project root directory\n      const projectRoot = path.join(__dirname, \"..\");\n      dbPath = path.join(projectRoot, \"prisma\", \"planforge.db\");\n    } else {\n      // In production, use user data directory\n      const userDataPath = app.getPath(\"userData\");\n      dbPath = path.join(userDataPath, \"planforge.db\");\n\n      // Copy database from resources if it doesn't exist\n      if (!fs.existsSync(dbPath)) {\n        const resourcesPath = process.resourcesPath;\n        const sourcePath = path.join(resourcesPath, \"prisma\", \"planforge.db\");\n\n        console.log(\"Copying database from:\", sourcePath);\n        console.log(\"To:\", dbPath);\n\n        try {\n          fs.mkdirSync(path.dirname(dbPath), { recursive: true });\n          fs.copyFileSync(sourcePath, dbPath);\n          console.log(\"Database copied successfully\");\n        } catch (copyError) {\n          console.error(\"Failed to copy database:\", copyError);\n          console.log(\"Creating new database...\");\n        }\n      }\n    }\n\n    console.log(\"Database path:\", dbPath);\n    console.log(\"Database path exists:\", fs.existsSync(dbPath));\n\n    try {\n      console.log(\"Initializing Prisma client...\");\n      const PrismaClient = createPrismaClient();\n      console.log(\"PrismaClient constructor obtained:\", !!PrismaClient);\n\n      this.prisma = new PrismaClient({\n        datasources: {\n          db: {\n            url: `file:${dbPath}`,\n          },\n        },\n      });\n      console.log(\"Prisma client instance created successfully\");\n    } catch (error) {\n      console.error(\"Failed to initialize Prisma client:\", error);\n      console.error(\n        \"Error details:\",\n        error instanceof Error ? error.message : String(error)\n      );\n      console.error(\n        \"Error stack:\",\n        error instanceof Error ? error.stack : \"No stack trace\"\n      );\n      throw new Error(\n        \"Database initialization failed. Please ensure Prisma client is properly installed.\"\n      );\n    }\n  }\n\n  async initialize() {\n    try {\n      // Test database connection\n      await this.prisma.$connect();\n      console.log(\"Database connected successfully\");\n      return true;\n    } catch (error) {\n      console.error(\"Database initialization failed:\", error);\n      throw error;\n    }\n  }\n\n  async disconnect() {\n    await this.prisma.$disconnect();\n  }\n\n  // Plan operations\n  async createPlan(data: {\n    title: string;\n    description?: string;\n    goal: string;\n    timeframe?: string;\n  }) {\n    return await this.prisma.plan.create({\n      data,\n      include: {\n        milestones: true,\n        tasks: true,\n        resources: true,\n      },\n    });\n  }\n\n  async getPlans() {\n    return await this.prisma.plan.findMany({\n      include: {\n        milestones: {\n          include: {\n            tasks: true,\n          },\n        },\n        tasks: true,\n        resources: true,\n      },\n      orderBy: {\n        updatedAt: \"desc\",\n      },\n    });\n  }\n\n  async getPlan(id: string) {\n    return await this.prisma.plan.findUnique({\n      where: { id },\n      include: {\n        milestones: {\n          include: {\n            tasks: {\n              include: {\n                dependsOn: {\n                  include: {\n                    prerequisite: true,\n                  },\n                },\n                dependencies: {\n                  include: {\n                    dependent: true,\n                  },\n                },\n              },\n            },\n          },\n          orderBy: {\n            order: \"asc\",\n          },\n        },\n        tasks: {\n          include: {\n            dependsOn: {\n              include: {\n                prerequisite: true,\n              },\n            },\n            dependencies: {\n              include: {\n                dependent: true,\n              },\n            },\n          },\n        },\n        resources: true,\n      },\n    });\n  }\n\n  async updatePlan(\n    id: string,\n    data: {\n      title?: string;\n      description?: string;\n      goal?: string;\n      timeframe?: string;\n      status?: string;\n    }\n  ) {\n    return await this.prisma.plan.update({\n      where: { id },\n      data,\n      include: {\n        milestones: true,\n        tasks: true,\n        resources: true,\n      },\n    });\n  }\n\n  async deletePlan(id: string) {\n    return await this.prisma.plan.delete({\n      where: { id },\n    });\n  }\n\n  // Milestone operations\n  async createMilestone(data: {\n    title: string;\n    description?: string;\n    targetDate?: Date;\n    planId: string;\n    order: number;\n  }) {\n    return await this.prisma.milestone.create({\n      data,\n      include: {\n        tasks: true,\n      },\n    });\n  }\n\n  async updateMilestone(\n    id: string,\n    data: {\n      title?: string;\n      description?: string;\n      targetDate?: Date;\n      status?: string;\n      order?: number;\n    }\n  ) {\n    return await this.prisma.milestone.update({\n      where: { id },\n      data,\n      include: {\n        tasks: true,\n      },\n    });\n  }\n\n  async deleteMilestone(id: string) {\n    return await this.prisma.milestone.delete({\n      where: { id },\n    });\n  }\n\n  // Task operations\n  async createTask(data: {\n    title: string;\n    description?: string;\n    planId: string;\n    milestoneId?: string;\n    priority?: string;\n    estimatedHours?: number;\n    dueDate?: Date;\n    order: number;\n  }) {\n    return await this.prisma.task.create({\n      data,\n      include: {\n        dependsOn: {\n          include: {\n            prerequisite: true,\n          },\n        },\n        dependencies: {\n          include: {\n            dependent: true,\n          },\n        },\n      },\n    });\n  }\n\n  async updateTask(\n    id: string,\n    data: {\n      title?: string;\n      description?: string;\n      status?: string;\n      priority?: string;\n      estimatedHours?: number;\n      actualHours?: number;\n      dueDate?: Date;\n      completedAt?: Date;\n      order?: number;\n      milestoneId?: string;\n    }\n  ) {\n    return await this.prisma.task.update({\n      where: { id },\n      data,\n      include: {\n        dependsOn: {\n          include: {\n            prerequisite: true,\n          },\n        },\n        dependencies: {\n          include: {\n            dependent: true,\n          },\n        },\n      },\n    });\n  }\n\n  async deleteTask(id: string) {\n    return await this.prisma.task.delete({\n      where: { id },\n    });\n  }\n\n  // Task dependency operations\n  async createTaskDependency(dependentId: string, prerequisiteId: string) {\n    return await this.prisma.taskDependency.create({\n      data: {\n        dependentId,\n        prerequisiteId,\n      },\n    });\n  }\n\n  async deleteTaskDependency(dependentId: string, prerequisiteId: string) {\n    return await this.prisma.taskDependency.delete({\n      where: {\n        dependentId_prerequisiteId: {\n          dependentId,\n          prerequisiteId,\n        },\n      },\n    });\n  }\n\n  // Resource operations\n  async createResource(data: {\n    title: string;\n    description?: string;\n    url?: string;\n    type: string;\n    planId: string;\n  }) {\n    return await this.prisma.resource.create({\n      data,\n    });\n  }\n\n  async updateResource(\n    id: string,\n    data: {\n      title?: string;\n      description?: string;\n      url?: string;\n      type?: string;\n    }\n  ) {\n    return await this.prisma.resource.update({\n      where: { id },\n      data,\n    });\n  }\n\n  async deleteResource(id: string) {\n    return await this.prisma.resource.delete({\n      where: { id },\n    });\n  }\n\n  // Settings operations\n  async getSettings() {\n    let settings = await this.prisma.settings.findUnique({\n      where: { id: \"settings\" },\n    });\n\n    if (!settings) {\n      settings = await this.prisma.settings.create({\n        data: { id: \"settings\" },\n      });\n    }\n\n    return settings;\n  }\n\n  async updateSettings(data: {\n    openaiApiKey?: string;\n    theme?: string;\n    language?: string;\n  }) {\n    return await this.prisma.settings.upsert({\n      where: { id: \"settings\" },\n      update: data,\n      create: { id: \"settings\", ...data },\n    });\n  }\n\n  // Statistics and analytics\n  async getPlanStats(planId: string) {\n    const plan = await this.prisma.plan.findUnique({\n      where: { id: planId },\n      include: {\n        milestones: true,\n        tasks: true,\n      },\n    });\n\n    if (!plan) return null;\n\n    const totalTasks = plan.tasks.length;\n    const completedTasks = plan.tasks.filter(\n      (task: any) => task.status === \"COMPLETED\"\n    ).length;\n    const totalMilestones = plan.milestones.length;\n    const completedMilestones = plan.milestones.filter(\n      (milestone: any) => milestone.status === \"COMPLETED\"\n    ).length;\n\n    const totalEstimatedHours = plan.tasks.reduce(\n      (sum: number, task: any) => sum + (task.estimatedHours || 0),\n      0\n    );\n    const totalActualHours = plan.tasks.reduce(\n      (sum: number, task: any) => sum + (task.actualHours || 0),\n      0\n    );\n\n    return {\n      totalTasks,\n      completedTasks,\n      taskProgress: totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0,\n      totalMilestones,\n      completedMilestones,\n      milestoneProgress:\n        totalMilestones > 0 ? (completedMilestones / totalMilestones) * 100 : 0,\n      totalEstimatedHours,\n      totalActualHours,\n      overallProgress: totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0,\n    };\n  }\n\n  async getDashboardStats() {\n    const plans = await this.prisma.plan.findMany({\n      include: {\n        tasks: true,\n        milestones: true,\n      },\n    });\n\n    const totalPlans = plans.length;\n    const activePlans = plans.filter(\n      (plan: any) => plan.status === \"ACTIVE\"\n    ).length;\n    const completedPlans = plans.filter(\n      (plan: any) => plan.status === \"COMPLETED\"\n    ).length;\n\n    const allTasks = plans.flatMap((plan: any) => plan.tasks);\n    const totalTasks = allTasks.length;\n    const completedTasks = allTasks.filter(\n      (task: any) => task.status === \"COMPLETED\"\n    ).length;\n\n    const overdueTasks = allTasks.filter(\n      (task: any) =>\n        task.dueDate &&\n        task.status !== \"COMPLETED\" &&\n        new Date(task.dueDate) < new Date()\n    ).length;\n\n    return {\n      totalPlans,\n      activePlans,\n      completedPlans,\n      totalTasks,\n      completedTasks,\n      overdueTasks,\n      taskCompletionRate:\n        totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0,\n    };\n  }\n}\n\n// Global database instance\nlet databaseInstance: DatabaseService | null = null;\n\nexport async function initDatabase(): Promise<DatabaseService> {\n  if (!databaseInstance) {\n    databaseInstance = new DatabaseService();\n    await databaseInstance.initialize();\n  }\n  return databaseInstance;\n}\n","import { app, BrowserWindow, shell, ipcMain, dialog } from \"electron\";\nimport { fileURLToPath } from \"node:url\";\nimport path from \"node:path\";\nimport os from \"node:os\";\nimport { DatabaseService } from \"./database.js\";\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main.js    > Electron main\n// │ └─┬ preload.js > Preload scripts\n// ├─┬ dist\n// │ └── index.html  > Electron renderer\n//\nprocess.env.APP_ROOT = path.join(__dirname, \"..\");\n\nexport const VITE_DEV_SERVER_URL = process.env[\"VITE_DEV_SERVER_URL\"];\nexport const MAIN_DIST = path.join(__dirname, \"..\");\nexport const RENDERER_DIST = path.join(__dirname, \"..\", \"dist\");\n\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\n  ? path.join(__dirname, \"..\", \"public\")\n  : RENDERER_DIST;\n\n// Disable GPU Acceleration for Windows 7\nif (os.release().startsWith(\"6.1\")) app.disableHardwareAcceleration();\n\n// Set application name for Windows 10+ notifications\nif (process.platform === \"win32\") app.setAppUserModelId(app.getName());\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit();\n  process.exit(0);\n}\n\n// Install \"react-devtools\"\n// app.whenReady().then(() => import('electron-devtools-installer')).then(({default: installExtension, REACT_DEVELOPER_TOOLS}) => installExtension(REACT_DEVELOPER_TOOLS, {\n//   loadExtensionOptions: {\n//     allowFileAccess: true,\n//   },\n// }))\n\nlet win: BrowserWindow | null = null;\nlet db: DatabaseService | null = null;\nlet dbInitialized = false;\n\n// Here, you can also use other preload\nconst preload = path.join(__dirname, \"preload.js\");\nconst url = process.env.VITE_DEV_SERVER_URL;\n\n// Helper function to check if database is available\nfunction ensureDatabase() {\n  if (!db || !dbInitialized) {\n    throw new Error(\n      \"Database not initialized. Please restart the application.\"\n    );\n  }\n  return db;\n}\n\nasync function createWindow() {\n  win = new BrowserWindow({\n    title: \"PlanForge\",\n    width: 1200,\n    height: 800,\n    minWidth: 900,\n    minHeight: 600,\n    webPreferences: {\n      preload,\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\n      // Consider using contextBridge.exposeInMainWorld\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n    titleBarStyle: \"default\",\n    show: false, // Don't show until ready\n  });\n\n  // Show window when ready to prevent visual flash\n  win.once(\"ready-to-show\", () => {\n    win?.show();\n\n    // Open DevTools in development\n    if (VITE_DEV_SERVER_URL) {\n      win?.webContents.openDevTools();\n    }\n  });\n\n  // Test active push message to Renderer-process.\n  win.webContents.on(\"did-finish-load\", () => {\n    win?.webContents.send(\"main-process-message\", new Date().toLocaleString());\n  });\n\n  if (VITE_DEV_SERVER_URL) {\n    win.loadURL(VITE_DEV_SERVER_URL);\n  } else {\n    // win.loadFile('dist/index.html')\n    win.loadFile(path.join(RENDERER_DIST, \"index.html\"));\n  }\n\n  // Make all links open with the browser, not with the application\n  win.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith(\"https:\")) shell.openExternal(url);\n    return { action: \"deny\" };\n  });\n  // win.webContents.on('will-navigate', (event, navigationUrl) => { ... })\n}\n\n// Initialize app\napp.whenReady().then(async () => {\n  // Initialize database\n  try {\n    console.log(\"Initializing database...\");\n    db = new DatabaseService();\n    await db.initialize();\n    dbInitialized = true;\n    console.log(\"Database initialized successfully\");\n  } catch (error) {\n    console.error(\"Failed to initialize database:\", error);\n\n    // Show error dialog\n    const result = await dialog.showMessageBox({\n      type: \"error\",\n      title: \"Database Error\",\n      message: \"Failed to initialize database\",\n      detail: `Error: ${\n        error instanceof Error ? error.message : String(error)\n      }\\n\\nThe application may not function correctly.`,\n      buttons: [\"Continue Anyway\", \"Exit\"],\n      defaultId: 1,\n      cancelId: 1,\n    });\n\n    if (result.response === 1) {\n      app.quit();\n      return;\n    }\n\n    // Continue without database (limited functionality)\n    dbInitialized = false;\n  }\n\n  createWindow();\n});\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", () => {\n  win = null;\n  if (process.platform !== \"darwin\") app.quit();\n});\n\napp.on(\"second-instance\", () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore();\n    win.focus();\n  }\n});\n\napp.on(\"activate\", () => {\n  const allWindows = BrowserWindow.getAllWindows();\n  if (allWindows.length === 0) {\n    createWindow();\n  } else {\n    allWindows[0].focus();\n  }\n});\n\n// New window example arg: new windows url\nipcMain.handle(\"open-win\", (_, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n      nodeIntegration: true,\n      contextIsolation: false,\n    },\n  });\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    childWindow.loadURL(`${url}#${arg}`);\n  } else {\n    childWindow.loadFile(path.join(RENDERER_DIST, \"index.html\"), { hash: arg });\n  }\n});\n\n// Handle app quit\napp.on(\"before-quit\", async () => {\n  console.log(\"App is quitting\");\n  if (db && dbInitialized) {\n    await db.disconnect();\n  }\n});\n\n// IPC handlers\nipcMain.handle(\"get-app-version\", () => {\n  return app.getVersion();\n});\n\nipcMain.handle(\"get-platform\", () => {\n  return process.platform;\n});\n\n// Database test connection\nipcMain.handle(\"db:test-connection\", async () => {\n  try {\n    const database = ensureDatabase();\n    await database.initialize();\n    return { success: true };\n  } catch (error) {\n    console.error(\"Database connection test failed:\", error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : String(error),\n    };\n  }\n});\n\n// Database IPC handlers\n// Plan operations\nipcMain.handle(\"db:create-plan\", async (_, data) => {\n  try {\n    const database = ensureDatabase();\n    return await database.createPlan(data);\n  } catch (error) {\n    console.error(\"Error creating plan:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"db:get-plans\", async () => {\n  try {\n    const database = ensureDatabase();\n    return await database.getPlans();\n  } catch (error) {\n    console.error(\"Error getting plans:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"db:get-plan\", async (_, id) => {\n  try {\n    const database = ensureDatabase();\n    return await database.getPlan(id);\n  } catch (error) {\n    console.error(\"Error getting plan:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"db:update-plan\", async (_, id, data) => {\n  try {\n    const database = ensureDatabase();\n    return await database.updatePlan(id, data);\n  } catch (error) {\n    console.error(\"Error updating plan:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"db:delete-plan\", async (_, id) => {\n  try {\n    const database = ensureDatabase();\n    return await database.deletePlan(id);\n  } catch (error) {\n    console.error(\"Error deleting plan:\", error);\n    throw error;\n  }\n});\n\n// Milestone operations\nipcMain.handle(\"db:create-milestone\", async (_, data) => {\n  try {\n    const database = ensureDatabase();\n    return await database.createMilestone(data);\n  } catch (error) {\n    console.error(\"Error creating milestone:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"db:update-milestone\", async (_, id, data) => {\n  try {\n    const database = ensureDatabase();\n    return await database.updateMilestone(id, data);\n  } catch (error) {\n    console.error(\"Error updating milestone:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"db:delete-milestone\", async (_, id) => {\n  try {\n    const database = ensureDatabase();\n    return await database.deleteMilestone(id);\n  } catch (error) {\n    console.error(\"Error deleting milestone:\", error);\n    throw error;\n  }\n});\n\n// Task operations\nipcMain.handle(\"db:create-task\", async (_, data) => {\n  try {\n    const database = ensureDatabase();\n    return await database.createTask(data);\n  } catch (error) {\n    console.error(\"Error creating task:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"db:update-task\", async (_, id, data) => {\n  try {\n    const database = ensureDatabase();\n    return await database.updateTask(id, data);\n  } catch (error) {\n    console.error(\"Error updating task:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"db:delete-task\", async (_, id) => {\n  try {\n    const database = ensureDatabase();\n    return await database.deleteTask(id);\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n    throw error;\n  }\n});\n\n// Task dependency operations\nipcMain.handle(\n  \"db:create-task-dependency\",\n  async (_, dependentId, prerequisiteId) => {\n    try {\n      const database = ensureDatabase();\n      return await database.createTaskDependency(dependentId, prerequisiteId);\n    } catch (error) {\n      console.error(\"Error creating task dependency:\", error);\n      throw error;\n    }\n  }\n);\n\nipcMain.handle(\n  \"db:delete-task-dependency\",\n  async (_, dependentId, prerequisiteId) => {\n    try {\n      const database = ensureDatabase();\n      return await database.deleteTaskDependency(dependentId, prerequisiteId);\n    } catch (error) {\n      console.error(\"Error deleting task dependency:\", error);\n      throw error;\n    }\n  }\n);\n\n// Resource operations\nipcMain.handle(\"db:create-resource\", async (_, data) => {\n  try {\n    const database = ensureDatabase();\n    return await database.createResource(data);\n  } catch (error) {\n    console.error(\"Error creating resource:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"db:update-resource\", async (_, id, data) => {\n  try {\n    const database = ensureDatabase();\n    return await database.updateResource(id, data);\n  } catch (error) {\n    console.error(\"Error updating resource:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"db:delete-resource\", async (_, id) => {\n  try {\n    const database = ensureDatabase();\n    return await database.deleteResource(id);\n  } catch (error) {\n    console.error(\"Error deleting resource:\", error);\n    throw error;\n  }\n});\n\n// Settings operations\nipcMain.handle(\"db:get-settings\", async () => {\n  try {\n    const database = ensureDatabase();\n    return await database.getSettings();\n  } catch (error) {\n    console.error(\"Error getting settings:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"db:update-settings\", async (_, data) => {\n  try {\n    const database = ensureDatabase();\n    return await database.updateSettings(data);\n  } catch (error) {\n    console.error(\"Error updating settings:\", error);\n    throw error;\n  }\n});\n\n// Statistics operations\nipcMain.handle(\"db:get-plan-stats\", async (_, planId) => {\n  try {\n    const database = ensureDatabase();\n    return await database.getPlanStats(planId);\n  } catch (error) {\n    console.error(\"Error getting plan stats:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"db:get-dashboard-stats\", async () => {\n  try {\n    const database = ensureDatabase();\n    return await database.getDashboardStats();\n  } catch (error) {\n    console.error(\"Error getting dashboard stats:\", error);\n    throw error;\n  }\n});\n"],"names":["app","__dirname","path","fileURLToPath","BrowserWindow","url","shell","dialog","ipcMain"],"mappings":";;;;;;;;;;;;AAKA,SAAS,qBAAqB;AAC5B,QAAM,QACJ,QAAQ,IAAI,aAAa,iBACxB,OAAOA,iBAAQ,eAAe,CAACA,SAAAA,IAAI;AAEtC,UAAQ,IAAI,2BAA2B;AACvC,UAAQ,IAAI,UAAU,KAAK;AAC3B,UAAQ,IAAI,0BAA0B,QAAQ,aAAa;AAE3D,MAAI,OAAO;AAET,YAAQ,IAAI,iCAAiC;AAC7C,UAAM,EAAE,aAAA,IAAiB,QAAQ,gBAAgB;AACjD,WAAO;AAAA,EACT,OAAO;AAEL,YAAQ,IAAI,qCAAqC;AAEjD,QAAI;AACF,YAAM,eAAe,KAAK;AAAA,QACxB,QAAQ;AAAA,QACR;AAAA,MAAA;AAEF,cAAQ,IAAI,kBAAkB,YAAY;AAC1C,cAAQ,IAAI,yBAAyB,GAAG,WAAW,YAAY,CAAC;AAEhE,YAAM,mBAAmB,KAAK;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAEF,cAAQ,IAAI,uBAAuB,gBAAgB;AACnD,cAAQ;AAAA,QACN;AAAA,QACA,GAAG,WAAW,gBAAgB;AAAA,MAAA;AAIhC,YAAM,sBAAsB,KAAK;AAAA,QAC/B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAGF,cAAQ;AAAA,QACN;AAAA,QACA;AAAA,MAAA;AAEF,cAAQ;AAAA,QACN;AAAA,QACA,GAAG,WAAW,mBAAmB;AAAA,MAAA;AAGnC,UAAI,GAAG,WAAW,mBAAmB,GAAG;AACtC,gBAAQ,IAAI,gDAAgD;AAG5D,cAAM,kBAAkB,KAAK;AAAA,UAC3B;AAAA,UACA;AAAA,QAAA;AAEF,gBAAQ,IAAI,2CAA2C,eAAe;AACtE,gBAAQ,IAAI,8BAA8B;AAG1C,cAAM,EAAE,aAAA,IAAiB,QAAQ,mBAAmB;AACpD,eAAO;AAAA,MACT,WAAW,GAAG,WAAW,gBAAgB,GAAG;AAC1C,gBAAQ,IAAI,oDAAoD;AAChE,cAAM,EAAE,aAAA,IAAiB,QAAQ,gBAAgB;AACjD,eAAO;AAAA,MACT,OAAO;AACL,gBAAQ,IAAI,iDAAiD;AAE7D,cAAM,EAAE,aAAA,IAAiB,QAAQ,gBAAgB;AACjD,eAAO;AAAA,MACT;AAAA,IACF,SAAS,OAAO;AACd,cAAQ;AAAA,QACN;AAAA,QACA;AAAA,MAAA;AAEF,cAAQ,IAAI,8BAA8B;AAE1C,YAAM,EAAE,aAAA,IAAiB,QAAQ,gBAAgB;AACjD,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAEO,MAAM,gBAAgB;AAAA,EAG3B,cAAc;AAFN;AAIN,UAAM,QACJ,QAAQ,IAAI,aAAa,iBACxB,OAAOA,iBAAQ,eAAe,CAACA,SAAAA,IAAI;AAEtC,QAAI;AAEJ,QAAI,OAAO;AAET,YAAM,cAAc,KAAK,KAAK,WAAW,IAAI;AAC7C,eAAS,KAAK,KAAK,aAAa,UAAU,cAAc;AAAA,IAC1D,OAAO;AAEL,YAAM,eAAeA,SAAAA,IAAI,QAAQ,UAAU;AAC3C,eAAS,KAAK,KAAK,cAAc,cAAc;AAG/C,UAAI,CAAC,GAAG,WAAW,MAAM,GAAG;AAC1B,cAAM,gBAAgB,QAAQ;AAC9B,cAAM,aAAa,KAAK,KAAK,eAAe,UAAU,cAAc;AAEpE,gBAAQ,IAAI,0BAA0B,UAAU;AAChD,gBAAQ,IAAI,OAAO,MAAM;AAEzB,YAAI;AACF,aAAG,UAAU,KAAK,QAAQ,MAAM,GAAG,EAAE,WAAW,MAAM;AACtD,aAAG,aAAa,YAAY,MAAM;AAClC,kBAAQ,IAAI,8BAA8B;AAAA,QAC5C,SAAS,WAAW;AAClB,kBAAQ,MAAM,4BAA4B,SAAS;AACnD,kBAAQ,IAAI,0BAA0B;AAAA,QACxC;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,IAAI,kBAAkB,MAAM;AACpC,YAAQ,IAAI,yBAAyB,GAAG,WAAW,MAAM,CAAC;AAE1D,QAAI;AACF,cAAQ,IAAI,+BAA+B;AAC3C,YAAM,eAAe,mBAAA;AACrB,cAAQ,IAAI,sCAAsC,CAAC,CAAC,YAAY;AAEhE,WAAK,SAAS,IAAI,aAAa;AAAA,QAC7B,aAAa;AAAA,UACX,IAAI;AAAA,YACF,KAAK,QAAQ,MAAM;AAAA,UAAA;AAAA,QACrB;AAAA,MACF,CACD;AACD,cAAQ,IAAI,6CAA6C;AAAA,IAC3D,SAAS,OAAO;AACd,cAAQ,MAAM,uCAAuC,KAAK;AAC1D,cAAQ;AAAA,QACN;AAAA,QACA,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AAAA,MAAA;AAEvD,cAAQ;AAAA,QACN;AAAA,QACA,iBAAiB,QAAQ,MAAM,QAAQ;AAAA,MAAA;AAEzC,YAAM,IAAI;AAAA,QACR;AAAA,MAAA;AAAA,IAEJ;AAAA,EACF;AAAA,EAEA,MAAM,aAAa;AACjB,QAAI;AAEF,YAAM,KAAK,OAAO,SAAA;AAClB,cAAQ,IAAI,iCAAiC;AAC7C,aAAO;AAAA,IACT,SAAS,OAAO;AACd,cAAQ,MAAM,mCAAmC,KAAK;AACtD,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,aAAa;AACjB,UAAM,KAAK,OAAO,YAAA;AAAA,EACpB;AAAA;AAAA,EAGA,MAAM,WAAW,MAKd;AACD,WAAO,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,MACnC;AAAA,MACA,SAAS;AAAA,QACP,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,WAAW;AAAA,MAAA;AAAA,IACb,CACD;AAAA,EACH;AAAA,EAEA,MAAM,WAAW;AACf,WAAO,MAAM,KAAK,OAAO,KAAK,SAAS;AAAA,MACrC,SAAS;AAAA,QACP,YAAY;AAAA,UACV,SAAS;AAAA,YACP,OAAO;AAAA,UAAA;AAAA,QACT;AAAA,QAEF,OAAO;AAAA,QACP,WAAW;AAAA,MAAA;AAAA,MAEb,SAAS;AAAA,QACP,WAAW;AAAA,MAAA;AAAA,IACb,CACD;AAAA,EACH;AAAA,EAEA,MAAM,QAAQ,IAAY;AACxB,WAAO,MAAM,KAAK,OAAO,KAAK,WAAW;AAAA,MACvC,OAAO,EAAE,GAAA;AAAA,MACT,SAAS;AAAA,QACP,YAAY;AAAA,UACV,SAAS;AAAA,YACP,OAAO;AAAA,cACL,SAAS;AAAA,gBACP,WAAW;AAAA,kBACT,SAAS;AAAA,oBACP,cAAc;AAAA,kBAAA;AAAA,gBAChB;AAAA,gBAEF,cAAc;AAAA,kBACZ,SAAS;AAAA,oBACP,WAAW;AAAA,kBAAA;AAAA,gBACb;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UAEF,SAAS;AAAA,YACP,OAAO;AAAA,UAAA;AAAA,QACT;AAAA,QAEF,OAAO;AAAA,UACL,SAAS;AAAA,YACP,WAAW;AAAA,cACT,SAAS;AAAA,gBACP,cAAc;AAAA,cAAA;AAAA,YAChB;AAAA,YAEF,cAAc;AAAA,cACZ,SAAS;AAAA,gBACP,WAAW;AAAA,cAAA;AAAA,YACb;AAAA,UACF;AAAA,QACF;AAAA,QAEF,WAAW;AAAA,MAAA;AAAA,IACb,CACD;AAAA,EACH;AAAA,EAEA,MAAM,WACJ,IACA,MAOA;AACA,WAAO,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,MACnC,OAAO,EAAE,GAAA;AAAA,MACT;AAAA,MACA,SAAS;AAAA,QACP,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,WAAW;AAAA,MAAA;AAAA,IACb,CACD;AAAA,EACH;AAAA,EAEA,MAAM,WAAW,IAAY;AAC3B,WAAO,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,MACnC,OAAO,EAAE,GAAA;AAAA,IAAG,CACb;AAAA,EACH;AAAA;AAAA,EAGA,MAAM,gBAAgB,MAMnB;AACD,WAAO,MAAM,KAAK,OAAO,UAAU,OAAO;AAAA,MACxC;AAAA,MACA,SAAS;AAAA,QACP,OAAO;AAAA,MAAA;AAAA,IACT,CACD;AAAA,EACH;AAAA,EAEA,MAAM,gBACJ,IACA,MAOA;AACA,WAAO,MAAM,KAAK,OAAO,UAAU,OAAO;AAAA,MACxC,OAAO,EAAE,GAAA;AAAA,MACT;AAAA,MACA,SAAS;AAAA,QACP,OAAO;AAAA,MAAA;AAAA,IACT,CACD;AAAA,EACH;AAAA,EAEA,MAAM,gBAAgB,IAAY;AAChC,WAAO,MAAM,KAAK,OAAO,UAAU,OAAO;AAAA,MACxC,OAAO,EAAE,GAAA;AAAA,IAAG,CACb;AAAA,EACH;AAAA;AAAA,EAGA,MAAM,WAAW,MASd;AACD,WAAO,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,MACnC;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS;AAAA,YACP,cAAc;AAAA,UAAA;AAAA,QAChB;AAAA,QAEF,cAAc;AAAA,UACZ,SAAS;AAAA,YACP,WAAW;AAAA,UAAA;AAAA,QACb;AAAA,MACF;AAAA,IACF,CACD;AAAA,EACH;AAAA,EAEA,MAAM,WACJ,IACA,MAYA;AACA,WAAO,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,MACnC,OAAO,EAAE,GAAA;AAAA,MACT;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS;AAAA,YACP,cAAc;AAAA,UAAA;AAAA,QAChB;AAAA,QAEF,cAAc;AAAA,UACZ,SAAS;AAAA,YACP,WAAW;AAAA,UAAA;AAAA,QACb;AAAA,MACF;AAAA,IACF,CACD;AAAA,EACH;AAAA,EAEA,MAAM,WAAW,IAAY;AAC3B,WAAO,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,MACnC,OAAO,EAAE,GAAA;AAAA,IAAG,CACb;AAAA,EACH;AAAA;AAAA,EAGA,MAAM,qBAAqB,aAAqB,gBAAwB;AACtE,WAAO,MAAM,KAAK,OAAO,eAAe,OAAO;AAAA,MAC7C,MAAM;AAAA,QACJ;AAAA,QACA;AAAA,MAAA;AAAA,IACF,CACD;AAAA,EACH;AAAA,EAEA,MAAM,qBAAqB,aAAqB,gBAAwB;AACtE,WAAO,MAAM,KAAK,OAAO,eAAe,OAAO;AAAA,MAC7C,OAAO;AAAA,QACL,4BAA4B;AAAA,UAC1B;AAAA,UACA;AAAA,QAAA;AAAA,MACF;AAAA,IACF,CACD;AAAA,EACH;AAAA;AAAA,EAGA,MAAM,eAAe,MAMlB;AACD,WAAO,MAAM,KAAK,OAAO,SAAS,OAAO;AAAA,MACvC;AAAA,IAAA,CACD;AAAA,EACH;AAAA,EAEA,MAAM,eACJ,IACA,MAMA;AACA,WAAO,MAAM,KAAK,OAAO,SAAS,OAAO;AAAA,MACvC,OAAO,EAAE,GAAA;AAAA,MACT;AAAA,IAAA,CACD;AAAA,EACH;AAAA,EAEA,MAAM,eAAe,IAAY;AAC/B,WAAO,MAAM,KAAK,OAAO,SAAS,OAAO;AAAA,MACvC,OAAO,EAAE,GAAA;AAAA,IAAG,CACb;AAAA,EACH;AAAA;AAAA,EAGA,MAAM,cAAc;AAClB,QAAI,WAAW,MAAM,KAAK,OAAO,SAAS,WAAW;AAAA,MACnD,OAAO,EAAE,IAAI,WAAA;AAAA,IAAW,CACzB;AAED,QAAI,CAAC,UAAU;AACb,iBAAW,MAAM,KAAK,OAAO,SAAS,OAAO;AAAA,QAC3C,MAAM,EAAE,IAAI,WAAA;AAAA,MAAW,CACxB;AAAA,IACH;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,eAAe,MAIlB;AACD,WAAO,MAAM,KAAK,OAAO,SAAS,OAAO;AAAA,MACvC,OAAO,EAAE,IAAI,WAAA;AAAA,MACb,QAAQ;AAAA,MACR,QAAQ,EAAE,IAAI,YAAY,GAAG,KAAA;AAAA,IAAK,CACnC;AAAA,EACH;AAAA;AAAA,EAGA,MAAM,aAAa,QAAgB;AACjC,UAAM,OAAO,MAAM,KAAK,OAAO,KAAK,WAAW;AAAA,MAC7C,OAAO,EAAE,IAAI,OAAA;AAAA,MACb,SAAS;AAAA,QACP,YAAY;AAAA,QACZ,OAAO;AAAA,MAAA;AAAA,IACT,CACD;AAED,QAAI,CAAC,KAAM,QAAO;AAElB,UAAM,aAAa,KAAK,MAAM;AAC9B,UAAM,iBAAiB,KAAK,MAAM;AAAA,MAChC,CAAC,SAAc,KAAK,WAAW;AAAA,IAAA,EAC/B;AACF,UAAM,kBAAkB,KAAK,WAAW;AACxC,UAAM,sBAAsB,KAAK,WAAW;AAAA,MAC1C,CAAC,cAAmB,UAAU,WAAW;AAAA,IAAA,EACzC;AAEF,UAAM,sBAAsB,KAAK,MAAM;AAAA,MACrC,CAAC,KAAa,SAAc,OAAO,KAAK,kBAAkB;AAAA,MAC1D;AAAA,IAAA;AAEF,UAAM,mBAAmB,KAAK,MAAM;AAAA,MAClC,CAAC,KAAa,SAAc,OAAO,KAAK,eAAe;AAAA,MACvD;AAAA,IAAA;AAGF,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,cAAc,aAAa,IAAK,iBAAiB,aAAc,MAAM;AAAA,MACrE;AAAA,MACA;AAAA,MACA,mBACE,kBAAkB,IAAK,sBAAsB,kBAAmB,MAAM;AAAA,MACxE;AAAA,MACA;AAAA,MACA,iBAAiB,aAAa,IAAK,iBAAiB,aAAc,MAAM;AAAA,IAAA;AAAA,EAE5E;AAAA,EAEA,MAAM,oBAAoB;AACxB,UAAM,QAAQ,MAAM,KAAK,OAAO,KAAK,SAAS;AAAA,MAC5C,SAAS;AAAA,QACP,OAAO;AAAA,QACP,YAAY;AAAA,MAAA;AAAA,IACd,CACD;AAED,UAAM,aAAa,MAAM;AACzB,UAAM,cAAc,MAAM;AAAA,MACxB,CAAC,SAAc,KAAK,WAAW;AAAA,IAAA,EAC/B;AACF,UAAM,iBAAiB,MAAM;AAAA,MAC3B,CAAC,SAAc,KAAK,WAAW;AAAA,IAAA,EAC/B;AAEF,UAAM,WAAW,MAAM,QAAQ,CAAC,SAAc,KAAK,KAAK;AACxD,UAAM,aAAa,SAAS;AAC5B,UAAM,iBAAiB,SAAS;AAAA,MAC9B,CAAC,SAAc,KAAK,WAAW;AAAA,IAAA,EAC/B;AAEF,UAAM,eAAe,SAAS;AAAA,MAC5B,CAAC,SACC,KAAK,WACL,KAAK,WAAW,eAChB,IAAI,KAAK,KAAK,OAAO,wBAAQ,KAAA;AAAA,IAAK,EACpC;AAEF,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,oBACE,aAAa,IAAK,iBAAiB,aAAc,MAAM;AAAA,IAAA;AAAA,EAE7D;AACF;AC9iBA,MAAMC,cAAYC,OAAK,QAAQC,SAAAA,cAAc,OAAA,aAAA,cAAA,QAAA,KAAA,EAAA,cAAA,UAAA,EAAA,OAAA,0BAAA,uBAAA,QAAA,YAAA,MAAA,YAAA,uBAAA,OAAA,IAAA,IAAA,WAAA,SAAA,OAAA,EAAA,IAAe,CAAC;AAU7D,QAAQ,IAAI,WAAWD,OAAK,KAAKD,aAAW,IAAI;AAEzC,MAAM,sBAAsB,QAAQ,IAAI,qBAAqB;AAC7D,MAAM,YAAYC,OAAK,KAAKD,aAAW,IAAI;AAC3C,MAAM,gBAAgBC,OAAK,KAAKD,aAAW,MAAM,MAAM;AAE9D,QAAQ,IAAI,cAAc,sBACtBC,OAAK,KAAKD,aAAW,MAAM,QAAQ,IACnC;AAGJ,IAAI,GAAG,QAAA,EAAU,WAAW,KAAK,gBAAO,4BAAA;AAGxC,IAAI,QAAQ,aAAa,sBAAa,kBAAkBD,SAAAA,IAAI,SAAS;AAErE,IAAI,CAACA,SAAAA,IAAI,6BAA6B;AACpCA,WAAAA,IAAI,KAAA;AACJ,UAAQ,KAAK,CAAC;AAChB;AASA,IAAI,MAA4B;AAChC,IAAI,KAA6B;AACjC,IAAI,gBAAgB;AAGpB,MAAM,UAAUE,OAAK,KAAKD,aAAW,YAAY;AACjD,MAAM,MAAM,QAAQ,IAAI;AAGxB,SAAS,iBAAiB;AACxB,MAAI,CAAC,MAAM,CAAC,eAAe;AACzB,UAAM,IAAI;AAAA,MACR;AAAA,IAAA;AAAA,EAEJ;AACA,SAAO;AACT;AAEA,eAAe,eAAe;AAC5B,QAAM,IAAIG,SAAAA,cAAc;AAAA,IACtB,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW;AAAA,IACX,gBAAgB;AAAA,MACd;AAAA;AAAA;AAAA;AAAA,MAIA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IAAA;AAAA,IAEpB,eAAe;AAAA,IACf,MAAM;AAAA;AAAA,EAAA,CACP;AAGD,MAAI,KAAK,iBAAiB,MAAM;AAC9B,+BAAK;AAGL,QAAI,qBAAqB;AACvB,iCAAK,YAAY;AAAA,IACnB;AAAA,EACF,CAAC;AAGD,MAAI,YAAY,GAAG,mBAAmB,MAAM;AAC1C,+BAAK,YAAY,KAAK,6CAA4B,KAAA,GAAO;EAC3D,CAAC;AAED,MAAI,qBAAqB;AACvB,QAAI,QAAQ,mBAAmB;AAAA,EACjC,OAAO;AAEL,QAAI,SAASF,OAAK,KAAK,eAAe,YAAY,CAAC;AAAA,EACrD;AAGA,MAAI,YAAY,qBAAqB,CAAC,EAAE,KAAAG,WAAU;AAChD,QAAIA,KAAI,WAAW,QAAQ,EAAGC,UAAAA,MAAM,aAAaD,IAAG;AACpD,WAAO,EAAE,QAAQ,OAAA;AAAA,EACnB,CAAC;AAEH;AAGAL,SAAAA,IAAI,UAAA,EAAY,KAAK,YAAY;AAE/B,MAAI;AACF,YAAQ,IAAI,0BAA0B;AACtC,SAAK,IAAI,gBAAA;AACT,UAAM,GAAG,WAAA;AACT,oBAAgB;AAChB,YAAQ,IAAI,mCAAmC;AAAA,EACjD,SAAS,OAAO;AACd,YAAQ,MAAM,kCAAkC,KAAK;AAGrD,UAAM,SAAS,MAAMO,SAAAA,OAAO,eAAe;AAAA,MACzC,MAAM;AAAA,MACN,OAAO;AAAA,MACP,SAAS;AAAA,MACT,QAAQ,UACN,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK,CACvD;AAAA;AAAA;AAAA,MACA,SAAS,CAAC,mBAAmB,MAAM;AAAA,MACnC,WAAW;AAAA,MACX,UAAU;AAAA,IAAA,CACX;AAED,QAAI,OAAO,aAAa,GAAG;AACzBP,eAAAA,IAAI,KAAA;AACJ;AAAA,IACF;AAGA,oBAAgB;AAAA,EAClB;AAEA,eAAA;AACF,CAAC;AAKDA,SAAAA,IAAI,GAAG,qBAAqB,MAAM;AAChC,QAAM;AACN,MAAI,QAAQ,aAAa,SAAUA,UAAAA,IAAI,KAAA;AACzC,CAAC;AAEDA,SAAAA,IAAI,GAAG,mBAAmB,MAAM;AAC9B,MAAI,KAAK;AAEP,QAAI,IAAI,cAAe,KAAI,QAAA;AAC3B,QAAI,MAAA;AAAA,EACN;AACF,CAAC;AAEDA,SAAAA,IAAI,GAAG,YAAY,MAAM;AACvB,QAAM,aAAaI,SAAAA,cAAc,cAAA;AACjC,MAAI,WAAW,WAAW,GAAG;AAC3B,iBAAA;AAAA,EACF,OAAO;AACL,eAAW,CAAC,EAAE,MAAA;AAAA,EAChB;AACF,CAAC;AAGDI,SAAAA,QAAQ,OAAO,YAAY,CAAC,GAAG,QAAQ;AACrC,QAAM,cAAc,IAAIJ,uBAAc;AAAA,IACpC,gBAAgB;AAAA,MACd;AAAA,MACA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IAAA;AAAA,EACpB,CACD;AAED,MAAI,QAAQ,IAAI,qBAAqB;AACnC,gBAAY,QAAQ,GAAG,GAAG,IAAI,GAAG,EAAE;AAAA,EACrC,OAAO;AACL,gBAAY,SAASF,OAAK,KAAK,eAAe,YAAY,GAAG,EAAE,MAAM,KAAK;AAAA,EAC5E;AACF,CAAC;AAGDF,SAAAA,IAAI,GAAG,eAAe,YAAY;AAChC,UAAQ,IAAI,iBAAiB;AAC7B,MAAI,MAAM,eAAe;AACvB,UAAM,GAAG,WAAA;AAAA,EACX;AACF,CAAC;AAGDQ,SAAAA,QAAQ,OAAO,mBAAmB,MAAM;AACtC,SAAOR,SAAAA,IAAI,WAAA;AACb,CAAC;AAEDQ,SAAAA,QAAQ,OAAO,gBAAgB,MAAM;AACnC,SAAO,QAAQ;AACjB,CAAC;AAGDA,SAAAA,QAAQ,OAAO,sBAAsB,YAAY;AAC/C,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,UAAM,SAAS,WAAA;AACf,WAAO,EAAE,SAAS,KAAA;AAAA,EACpB,SAAS,OAAO;AACd,YAAQ,MAAM,oCAAoC,KAAK;AACvD,WAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AAAA,IAAA;AAAA,EAEhE;AACF,CAAC;AAIDA,SAAAA,QAAQ,OAAO,kBAAkB,OAAO,GAAG,SAAS;AAClD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,WAAW,IAAI;AAAA,EACvC,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,UAAM;AAAA,EACR;AACF,CAAC;AAEDA,SAAAA,QAAQ,OAAO,gBAAgB,YAAY;AACzC,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,SAAA;AAAA,EACxB,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,UAAM;AAAA,EACR;AACF,CAAC;AAEDA,SAAAA,QAAQ,OAAO,eAAe,OAAO,GAAG,OAAO;AAC7C,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,QAAQ,EAAE;AAAA,EAClC,SAAS,OAAO;AACd,YAAQ,MAAM,uBAAuB,KAAK;AAC1C,UAAM;AAAA,EACR;AACF,CAAC;AAEDA,SAAAA,QAAQ,OAAO,kBAAkB,OAAO,GAAG,IAAI,SAAS;AACtD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,WAAW,IAAI,IAAI;AAAA,EAC3C,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,UAAM;AAAA,EACR;AACF,CAAC;AAEDA,SAAAA,QAAQ,OAAO,kBAAkB,OAAO,GAAG,OAAO;AAChD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,WAAW,EAAE;AAAA,EACrC,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,UAAM;AAAA,EACR;AACF,CAAC;AAGDA,SAAAA,QAAQ,OAAO,uBAAuB,OAAO,GAAG,SAAS;AACvD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,gBAAgB,IAAI;AAAA,EAC5C,SAAS,OAAO;AACd,YAAQ,MAAM,6BAA6B,KAAK;AAChD,UAAM;AAAA,EACR;AACF,CAAC;AAEDA,SAAAA,QAAQ,OAAO,uBAAuB,OAAO,GAAG,IAAI,SAAS;AAC3D,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,gBAAgB,IAAI,IAAI;AAAA,EAChD,SAAS,OAAO;AACd,YAAQ,MAAM,6BAA6B,KAAK;AAChD,UAAM;AAAA,EACR;AACF,CAAC;AAEDA,SAAAA,QAAQ,OAAO,uBAAuB,OAAO,GAAG,OAAO;AACrD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,gBAAgB,EAAE;AAAA,EAC1C,SAAS,OAAO;AACd,YAAQ,MAAM,6BAA6B,KAAK;AAChD,UAAM;AAAA,EACR;AACF,CAAC;AAGDA,SAAAA,QAAQ,OAAO,kBAAkB,OAAO,GAAG,SAAS;AAClD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,WAAW,IAAI;AAAA,EACvC,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,UAAM;AAAA,EACR;AACF,CAAC;AAEDA,SAAAA,QAAQ,OAAO,kBAAkB,OAAO,GAAG,IAAI,SAAS;AACtD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,WAAW,IAAI,IAAI;AAAA,EAC3C,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,UAAM;AAAA,EACR;AACF,CAAC;AAEDA,SAAAA,QAAQ,OAAO,kBAAkB,OAAO,GAAG,OAAO;AAChD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,WAAW,EAAE;AAAA,EACrC,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,UAAM;AAAA,EACR;AACF,CAAC;AAGDA,SAAAA,QAAQ;AAAA,EACN;AAAA,EACA,OAAO,GAAG,aAAa,mBAAmB;AACxC,QAAI;AACF,YAAM,WAAW,eAAA;AACjB,aAAO,MAAM,SAAS,qBAAqB,aAAa,cAAc;AAAA,IACxE,SAAS,OAAO;AACd,cAAQ,MAAM,mCAAmC,KAAK;AACtD,YAAM;AAAA,IACR;AAAA,EACF;AACF;AAEAA,SAAAA,QAAQ;AAAA,EACN;AAAA,EACA,OAAO,GAAG,aAAa,mBAAmB;AACxC,QAAI;AACF,YAAM,WAAW,eAAA;AACjB,aAAO,MAAM,SAAS,qBAAqB,aAAa,cAAc;AAAA,IACxE,SAAS,OAAO;AACd,cAAQ,MAAM,mCAAmC,KAAK;AACtD,YAAM;AAAA,IACR;AAAA,EACF;AACF;AAGAA,SAAAA,QAAQ,OAAO,sBAAsB,OAAO,GAAG,SAAS;AACtD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,eAAe,IAAI;AAAA,EAC3C,SAAS,OAAO;AACd,YAAQ,MAAM,4BAA4B,KAAK;AAC/C,UAAM;AAAA,EACR;AACF,CAAC;AAEDA,SAAAA,QAAQ,OAAO,sBAAsB,OAAO,GAAG,IAAI,SAAS;AAC1D,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,eAAe,IAAI,IAAI;AAAA,EAC/C,SAAS,OAAO;AACd,YAAQ,MAAM,4BAA4B,KAAK;AAC/C,UAAM;AAAA,EACR;AACF,CAAC;AAEDA,SAAAA,QAAQ,OAAO,sBAAsB,OAAO,GAAG,OAAO;AACpD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,eAAe,EAAE;AAAA,EACzC,SAAS,OAAO;AACd,YAAQ,MAAM,4BAA4B,KAAK;AAC/C,UAAM;AAAA,EACR;AACF,CAAC;AAGDA,SAAAA,QAAQ,OAAO,mBAAmB,YAAY;AAC5C,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,YAAA;AAAA,EACxB,SAAS,OAAO;AACd,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,UAAM;AAAA,EACR;AACF,CAAC;AAEDA,SAAAA,QAAQ,OAAO,sBAAsB,OAAO,GAAG,SAAS;AACtD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,eAAe,IAAI;AAAA,EAC3C,SAAS,OAAO;AACd,YAAQ,MAAM,4BAA4B,KAAK;AAC/C,UAAM;AAAA,EACR;AACF,CAAC;AAGDA,SAAAA,QAAQ,OAAO,qBAAqB,OAAO,GAAG,WAAW;AACvD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,aAAa,MAAM;AAAA,EAC3C,SAAS,OAAO;AACd,YAAQ,MAAM,6BAA6B,KAAK;AAChD,UAAM;AAAA,EACR;AACF,CAAC;AAEDA,SAAAA,QAAQ,OAAO,0BAA0B,YAAY;AACnD,MAAI;AACF,UAAM,WAAW,eAAA;AACjB,WAAO,MAAM,SAAS,kBAAA;AAAA,EACxB,SAAS,OAAO;AACd,YAAQ,MAAM,kCAAkC,KAAK;AACrD,UAAM;AAAA,EACR;AACF,CAAC;;;;"}